{
  "address": "0xEd2bA2Af295427d8af59C9389f9834aCfD3DDAf1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_FUND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_Owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3c0e9eacbcdf061b16e832c3f23dea3025390cbe93e0fca3105b4b917886e8d6",
  "receipt": {
    "to": null,
    "from": "0x3B2246ce5c6BC3e0EA34EF7c1E2C04A0783B93Bf",
    "contractAddress": "0xEd2bA2Af295427d8af59C9389f9834aCfD3DDAf1",
    "transactionIndex": 15,
    "gasUsed": "1044864",
    "logsBloom": "0x
    "blockHash": "0x8979b530154599ac56532ca14802b8389ad18d951ee98beafa147d6a72d32cd3",
    "transactionHash": "0x3c0e9eacbcdf061b16e832c3f23dea3025390cbe93e0fca3105b4b917886e8d6",
    "logs": [],
    "blockNumber": 11122653,
    "cumulativeGasUsed": "9647779",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "23267cdc0eefcbd72f405bd3cb02bf21",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_FUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Lawal Habeebullahi\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is just a demo\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Send funds to contract\\r\\n// Withdraw funds from contract\\r\\n// Fix minimum value of fund to send to contract\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// 822,736\\r\\n// 800,890\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/** @title A contract for crowd funding\\r\\n    @author Lawal Habeebullahi\\r\\n    @notice This is just a demo\\r\\n    @dev This implements price feeds as our library\\r\\n */\\r\\ncontract FundMe {\\r\\n    uint256 public constant MINIMUM_FUND = 5 * 10**18;\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    AggregatorV3Interface public s_priceFeed;\\r\\n\\r\\n    address public immutable i_Owner;\\r\\n\\r\\n    address[] public s_funders;\\r\\n    mapping(address => uint256) public s_addressToAmountFunded;\\r\\n\\r\\n    modifier admin() {\\r\\n        // require(msg.sender == i_Owner, \\\"Administrator only\\\");\\r\\n        if (msg.sender != i_Owner) {\\r\\n            revert FundMe__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_Owner = msg.sender;\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        // require(convertToDollars(msg.value) > MINIMUM_FUND, \\\"Didn't send enough funds.\\\");\\r\\n        require(\\r\\n            msg.value.convertToDollars(s_priceFeed) > MINIMUM_FUND,\\r\\n            \\\"Not enough funds\\\"\\r\\n        );\\r\\n        s_funders.push(msg.sender);\\r\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n    }\\r\\n\\r\\n    function Withdraw() public admin {\\r\\n        // reset s_funders mapping\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        // reset s_funders array\\r\\n        s_funders = new address[](0);\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\");\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable admin {\\r\\n        address[] memory funders = s_funders;\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        (bool success, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(success, \\\"Unable to send funds to admin\\\");\\r\\n    }\\r\\n\\r\\n    // function getAddressToAmountFunded(address _address)\\r\\n    //     public\\r\\n    //     view\\r\\n    //     returns (uint256)\\r\\n    // {\\r\\n    //     return (s_addressToAmountFunded[_address]);\\r\\n    // }\\r\\n}\\r\\n// send funds to another address\\r\\n// funds can only be sent to payable address types\\r\\n// Three means of sending funds:\\r\\n// // > transfer\\r\\n// payable(msg.sender).transfer(address(this).balance);\\r\\n// // > send\\r\\n// bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n// require(sendSuccess, \\\"Send failed\\\");\\r\\n// > call\\r\\n\",\"keccak256\":\"0xe44181dbb3c36c5c0cfcb9ac5559618611860dba26eab23450e46c7a11b48e96\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getEthInDollars(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // interact with the ORACLE to get latest market eth value in dollars\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        // );\\r\\n        (, int256 ethValueInDollars, , , ) = priceFeed.latestRoundData();\\r\\n\\r\\n        return uint256(ethValueInDollars * 1e10);\\r\\n    }\\r\\n\\r\\n    function convertToDollars(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethInDol = getEthInDollars(priceFeed);\\r\\n        return (ethAmount * ethInDol) / 1e18;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9dfb1eb4691d005412ebb80f29aed256e920b4305485d830621e270efae7ed3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013023803806200130283398181016040528101906200003791906200011c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e482620000b7565b9050919050565b620000f681620000d7565b81146200010257600080fd5b50565b6000815190506200011681620000eb565b92915050565b600060208284031215620001355762000134620000b2565b5b6000620001458482850162000105565b91505092915050565b60805161118a6200017860003960008181610372015281816105bf0152610864015261118a6000f3fe60806040526004361061007f5760003560e01c80635deb01721161004e5780635deb017214610154578063b60d42881461017f578063be2693f014610189578063e667b0bf146101935761008e565b80630ec3b027146100985780631bf6132d146100c357806354861af71461010057806357ea89b61461013d5761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100ad6102f5565b6040516100ba9190610a73565b60405180910390f35b3480156100cf57600080fd5b506100ea60048036038101906100e59190610ad1565b610319565b6040516100f79190610b17565b60405180910390f35b34801561010c57600080fd5b5061012760048036038101906101229190610b5e565b610331565b6040516101349190610b9a565b60405180910390f35b34801561014957600080fd5b50610152610370565b005b34801561016057600080fd5b506101696105b1565b6040516101769190610b17565b60405180910390f35b6101876101be565b005b6101916105bd565b005b34801561019f57600080fd5b506101a8610862565b6040516101b59190610b9a565b60405180910390f35b674563918244f400006101fa60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088690919063ffffffff16565b1161023a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023190610c12565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ec9190610c61565b92505081905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b6001818154811061034157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104a15760006001828154811061041b5761041a610cb7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049990610ce6565b9150506103f8565b50600067ffffffffffffffff8111156104bd576104bc610d2e565b5b6040519080825280602002602001820160405280156104eb5781602001602082028036833780820191505090505b506001908051906020019061050192919061094d565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052890610d8e565b60006040518083038185875af1925050503d8060008114610565576040519150601f19603f3d011682016040523d82523d6000602084013e61056a565b606091505b50509050806105ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a590610def565b60405180910390fd5b50565b674563918244f4000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610642576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067c575b5050505050905060005b81518110156107515760008282815181106106ee576106ed610cb7565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074990610ce6565b9150506106d0565b50600067ffffffffffffffff81111561076d5761076c610d2e565b5b60405190808252806020026020018201604052801561079b5781602001602082028036833780820191505090505b50600190805190602001906107b192919061094d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107d890610d8e565b60006040518083038185875af1925050503d8060008114610815576040519150601f19603f3d011682016040523d82523d6000602084013e61081a565b606091505b505090508061085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085590610e5b565b60405180910390fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610892836108bc565b9050670de0b6b3a764000081856108a99190610e7b565b6108b39190610f04565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e9190610fc2565b5050509150506402540be40081610945919061103d565b915050919050565b8280548282559060005260206000209081019282156109c6579160200282015b828111156109c55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061096d565b5b5090506109d391906109d7565b5090565b5b808211156109f05760008160009055506001016109d8565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a39610a34610a2f846109f4565b610a14565b6109f4565b9050919050565b6000610a4b82610a1e565b9050919050565b6000610a5d82610a40565b9050919050565b610a6d81610a52565b82525050565b6000602082019050610a886000830184610a64565b92915050565b600080fd5b6000610a9e826109f4565b9050919050565b610aae81610a93565b8114610ab957600080fd5b50565b600081359050610acb81610aa5565b92915050565b600060208284031215610ae757610ae6610a8e565b5b6000610af584828501610abc565b91505092915050565b6000819050919050565b610b1181610afe565b82525050565b6000602082019050610b2c6000830184610b08565b92915050565b610b3b81610afe565b8114610b4657600080fd5b50565b600081359050610b5881610b32565b92915050565b600060208284031215610b7457610b73610a8e565b5b6000610b8284828501610b49565b91505092915050565b610b9481610a93565b82525050565b6000602082019050610baf6000830184610b8b565b92915050565b600082825260208201905092915050565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b6000610bfc601083610bb5565b9150610c0782610bc6565b602082019050919050565b60006020820190508181036000830152610c2b81610bef565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c6c82610afe565b9150610c7783610afe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cac57610cab610c32565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cf182610afe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d2357610d22610c32565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d78600083610d5d565b9150610d8382610d68565b600082019050919050565b6000610d9982610d6b565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dd9600b83610bb5565b9150610de482610da3565b602082019050919050565b60006020820190508181036000830152610e0881610dcc565b9050919050565b7f556e61626c6520746f2073656e642066756e647320746f2061646d696e000000600082015250565b6000610e45601d83610bb5565b9150610e5082610e0f565b602082019050919050565b60006020820190508181036000830152610e7481610e38565b9050919050565b6000610e8682610afe565b9150610e9183610afe565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eca57610ec9610c32565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f0f82610afe565b9150610f1a83610afe565b925082610f2a57610f29610ed5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f5481610f35565b8114610f5f57600080fd5b50565b600081519050610f7181610f4b565b92915050565b6000819050919050565b610f8a81610f77565b8114610f9557600080fd5b50565b600081519050610fa781610f81565b92915050565b600081519050610fbc81610b32565b92915050565b600080600080600060a08688031215610fde57610fdd610a8e565b5b6000610fec88828901610f62565b9550506020610ffd88828901610f98565b945050604061100e88828901610fad565b935050606061101f88828901610fad565b925050608061103088828901610f62565b9150509295509295909350565b600061104882610f77565b915061105383610f77565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561109257611091610c32565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110cf576110ce610c32565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561110c5761110b610c32565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561114957611148610c32565b5b82820290509291505056fea2646970667358221220cf0ed2f14a016019a3f76547f9984297c51ae232a492c4aadd6cc16fecdc5a8864736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80635deb01721161004e5780635deb017214610154578063b60d42881461017f578063be2693f014610189578063e667b0bf146101935761008e565b80630ec3b027146100985780631bf6132d146100c357806354861af71461010057806357ea89b61461013d5761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100ad6102f5565b6040516100ba9190610a73565b60405180910390f35b3480156100cf57600080fd5b506100ea60048036038101906100e59190610ad1565b610319565b6040516100f79190610b17565b60405180910390f35b34801561010c57600080fd5b5061012760048036038101906101229190610b5e565b610331565b6040516101349190610b9a565b60405180910390f35b34801561014957600080fd5b50610152610370565b005b34801561016057600080fd5b506101696105b1565b6040516101769190610b17565b60405180910390f35b6101876101be565b005b6101916105bd565b005b34801561019f57600080fd5b506101a8610862565b6040516101b59190610b9a565b60405180910390f35b674563918244f400006101fa60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088690919063ffffffff16565b1161023a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023190610c12565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ec9190610c61565b92505081905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b6001818154811061034157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104a15760006001828154811061041b5761041a610cb7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049990610ce6565b9150506103f8565b50600067ffffffffffffffff8111156104bd576104bc610d2e565b5b6040519080825280602002602001820160405280156104eb5781602001602082028036833780820191505090505b506001908051906020019061050192919061094d565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052890610d8e565b60006040518083038185875af1925050503d8060008114610565576040519150601f19603f3d011682016040523d82523d6000602084013e61056a565b606091505b50509050806105ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a590610def565b60405180910390fd5b50565b674563918244f4000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610642576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067c575b5050505050905060005b81518110156107515760008282815181106106ee576106ed610cb7565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074990610ce6565b9150506106d0565b50600067ffffffffffffffff81111561076d5761076c610d2e565b5b60405190808252806020026020018201604052801561079b5781602001602082028036833780820191505090505b50600190805190602001906107b192919061094d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107d890610d8e565b60006040518083038185875af1925050503d8060008114610815576040519150601f19603f3d011682016040523d82523d6000602084013e61081a565b606091505b505090508061085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085590610e5b565b60405180910390fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610892836108bc565b9050670de0b6b3a764000081856108a99190610e7b565b6108b39190610f04565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e9190610fc2565b5050509150506402540be40081610945919061103d565b915050919050565b8280548282559060005260206000209081019282156109c6579160200282015b828111156109c55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061096d565b5b5090506109d391906109d7565b5090565b5b808211156109f05760008160009055506001016109d8565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a39610a34610a2f846109f4565b610a14565b6109f4565b9050919050565b6000610a4b82610a1e565b9050919050565b6000610a5d82610a40565b9050919050565b610a6d81610a52565b82525050565b6000602082019050610a886000830184610a64565b92915050565b600080fd5b6000610a9e826109f4565b9050919050565b610aae81610a93565b8114610ab957600080fd5b50565b600081359050610acb81610aa5565b92915050565b600060208284031215610ae757610ae6610a8e565b5b6000610af584828501610abc565b91505092915050565b6000819050919050565b610b1181610afe565b82525050565b6000602082019050610b2c6000830184610b08565b92915050565b610b3b81610afe565b8114610b4657600080fd5b50565b600081359050610b5881610b32565b92915050565b600060208284031215610b7457610b73610a8e565b5b6000610b8284828501610b49565b91505092915050565b610b9481610a93565b82525050565b6000602082019050610baf6000830184610b8b565b92915050565b600082825260208201905092915050565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b6000610bfc601083610bb5565b9150610c0782610bc6565b602082019050919050565b60006020820190508181036000830152610c2b81610bef565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c6c82610afe565b9150610c7783610afe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cac57610cab610c32565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cf182610afe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d2357610d22610c32565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d78600083610d5d565b9150610d8382610d68565b600082019050919050565b6000610d9982610d6b565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dd9600b83610bb5565b9150610de482610da3565b602082019050919050565b60006020820190508181036000830152610e0881610dcc565b9050919050565b7f556e61626c6520746f2073656e642066756e647320746f2061646d696e000000600082015250565b6000610e45601d83610bb5565b9150610e5082610e0f565b602082019050919050565b60006020820190508181036000830152610e7481610e38565b9050919050565b6000610e8682610afe565b9150610e9183610afe565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eca57610ec9610c32565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f0f82610afe565b9150610f1a83610afe565b925082610f2a57610f29610ed5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f5481610f35565b8114610f5f57600080fd5b50565b600081519050610f7181610f4b565b92915050565b6000819050919050565b610f8a81610f77565b8114610f9557600080fd5b50565b600081519050610fa781610f81565b92915050565b600081519050610fbc81610b32565b92915050565b600080600080600060a08688031215610fde57610fdd610a8e565b5b6000610fec88828901610f62565b9550506020610ffd88828901610f98565b945050604061100e88828901610fad565b935050606061101f88828901610fad565b925050608061103088828901610f62565b9150509295509295909350565b600061104882610f77565b915061105383610f77565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561109257611091610c32565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110cf576110ce610c32565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561110c5761110b610c32565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561114957611148610c32565b5b82820290509291505056fea2646970667358221220cf0ed2f14a016019a3f76547f9984297c51ae232a492c4aadd6cc16fecdc5a8864736f6c634300080f0033",
  "devdoc": {
    "author": "Lawal Habeebullahi",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This is just a demo",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}